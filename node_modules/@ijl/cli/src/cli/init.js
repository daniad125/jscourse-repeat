const fs = require('fs');
const path = require('path');
const mkdirp = require('mkdirp');
const chalk = require('chalk');

const logSuccess = (...messages) => console.log(chalk.green(...messages))
const logError = (...messages) => console.log(chalk.reed(...messages))
const logWarning = (...messages) => console.log(chalk.keyword('orange')(...messages))

module.exports = async () => {

    const packagePath = path.resolve("package");
    const package = require(packagePath);
    const configPath = path.resolve("ijl.config.js");
    const tsConfigPath = path.resolve("tsconfig.json");
    const stubsApiRoot = path.resolve('stubs', 'api', 'index.js');
    const entryPath = path.resolve('src/index.tsx');


    fs.exists(configPath, (exists) => {
        if (!exists) {
            const createConfig = require('./templates/ijl.config');

            fs.writeFile(configPath, createConfig(package.name), () => logSuccess('ijl.config.js создан.'));
        } else {
            logWarning('ijl.config.js Уже существует, пропускаю этот шаг.');
        }
    })
    
    fs.exists(tsConfigPath, (exists) => {
        if (!exists) {
            const createConfig = require('./templates/tsconfig');

            fs.writeFile(tsConfigPath, createConfig(), () => logSuccess('tsconfig.json создан.'));
        } else {
            logWarning('tsconfig.json Уже существует, пропускаю этот шаг.');
        }
    })

    try {
        await mkdirp(path.resolve('stubs/api'));
    } catch (error) {
        logError('error', error);
    }

    fs.exists(stubsApiRoot, (exists) => {
        if (!exists) {
            const createStub = require('./templates/stubs');

            fs.writeFile(stubsApiRoot, createStub(), () => logSuccess('stub/api создан.'));
        } else {
            logWarning('stub/api Уже существует, пропускаю этот шаг.');
        }
    })

    try {
        await mkdirp(path.resolve('src'));
    } catch (error) {
        logError('error', error);
    }

    fs.exists(entryPath, (exists) => {
        if (!exists) {
            const createEntry = require('./templates/entry');

            fs.writeFile(entryPath, createEntry(package.name), () => logSuccess('src/index.tsx создан.'));

        } else {
            logWarning('src/index.tsx Уже существует, пропускаю этот шаг.');
        }
    })
    
    package.main = './src/index.tsx';
    package.scripts = package.scripts || {}
    package.scripts.start = 'ijl-cli --server --port=8099 --with-open-browser'
    package.scripts.build = 'npm run clean && ijl-cli --build --dev'
    package.scripts['build:prod'] = "npm run clean && ijl-cli --build",
    package.scripts.clean = 'rimraf dist'

    logSuccess('Обновляю package.json ...')
    fs.writeFileSync(packagePath + '.json', JSON.stringify(package, null, 4));

    logSuccess('Устанавливаю необходимые зависимости ...')
    require('child_process').execSync(
        'npm i --save react react-dom express typescript',
        { stdio: 'inherit' }
    );;

    logSuccess(`
Все готово
Наберите команду npm start
`)
    
}